// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=c);
    //load to ARegister
    Or(a=c, b=instruction[5], out=A);
    Mux16(a[0..14]=instruction[0..14], a[15]=false, b=inA, sel=instruction[15], out=toAR);
    ARegister(in=toAR, load=A, out=ARout, out[0..14]=addressM);
    And(a=instruction[15], b=instruction[12], out=AndOut);
    And(a=instruction[15], b=instruction[4], out=D);
    //select A or M
    Mux16(a=ARout, b=inM, sel=AndOut, out=Aout);
    //load the D register from ALU
    DRegister(in=OutALU, load=D, out=Dout);
    //calculate
    ALU(x=Dout, y=Aout, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=OutALU, out=inA, zr=zr, ng=ng);
    //calc des & toPC, load PC with A reg
    And(a=instruction[3], b=instruction[15], out=writeM);
    Or(a=zr, b=ng, out=outOR);
    Not(in=outOR, out=outNot);
    //is >0 and jump if pos
    And(a=instruction[0], b=outNot, out=jgt);
    //is 0 and jump if zero
    And(a=instruction[1], b=zr, out=jeq);
    //is <0 and jump if neg
    And(a=instruction[2], b=ng, out=jlt);
    Or(a=jgt, b=jeq, out=jte);
    Or(a=jlt, b=jte, out=jumpb);
    //jump if instruction
    And(a=instruction[15], b=jumpb, out=des);
    //if not load
    Not(in=des, out=toPC);
    PC(in=ARout, load=des, inc=toPC, reset=reset, out[0..14]=pc);


}


